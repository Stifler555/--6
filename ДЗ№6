1. Создать класс TrafficLight (светофор) и определить у него
один атрибут color (цвет) и метод running (запуск).
Атрибут реализовать как приватный.
В рамках метода реализовать переключение светофора в режимы:
красный, желтый, зеленый.
Продолжительность первого состояния (красный) составляет 7 секунд,
второго (желтый) — 2 секунды, третьего (зеленый) —
на ваше усмотрение.
Переключение между режимами должно осуществляться только
в указанном порядке (красный, желтый, зеленый).
Проверить работу примера, создав экземпляр и вызвав описанный метод.
Задачу можно усложнить, реализовав проверку порядка режимов,
и при его нарушении выводить соответствующее сообщение и
завершать скрипт.




from time import sleepimport itertools
import time


class TrafficLight:
    __color: str
    __timing: dict
    
    def __init__(self, red_time: int = 7, yellow_time: int = 2, green_time: int = 5):
        self.__timing = {
            "red": red_time
            "yellow": yellow_time
            "green": green_time
        }

    def running(self):
       for mode, timer in intertools.cycle(self.__timing.items()):
            self.__color = mode
            
            for socond in range(timer):
                print(f"{self} [{second + 1}]")
                time.sleep(1)
                
    def __repr__(self):
        return f"Текущий режим = {self.__color}"
    
try:
    traffic_light = TrafficLight(7, 2, 5)
    traffic_light.running()
except KeyboardInterrupt:
    print("Exit the program")





2. Реализовать класс Road (дорога), в котором определить атрибуты:
length (длина), width (ширина).
Значения данных атрибутов должны передаваться при создании
экземпляра класса. Атрибуты сделать защищенными.
Определить метод расчета массы асфальта, необходимого
для покрытия всего дорожного полотна.
Использовать формулу: длина*ширина*масса асфальта
для покрытия одного кв метра дороги асфальтом, толщиной
в 1 см*число см толщины полотна. Проверить работу метода.
Например: 20м*5000м*25кг*5см = 12500 т


class Road:
    __mass: float = 25.0
    _length: float
    _width: float
    
    def __init__(self, length: float, width: float):
        self._length = length
        self._width = width
        
    def calculate(self, depth: float = 1):
        return (self._length * self._width * self.__mass * depth) / 1000
    
road = Road(20, 5000)
calculation = road.calculate(5)

print(f"{calculation} т")





3. Реализовать базовый класс Worker (работник), в котором определить
атрибуты: name, surname, position (должность), income (доход).
Последний атрибут должен быть защищенным и ссылаться на словарь,
содержащий элементы: оклад и премия, например,
{"wage": wage, "bonus": bonus}. Создать класс Position
(должность) на базе класса Worker.
В классе Position реализовать методы получения полного
имени сотрудника (get_full_name) и дохода с учетом премии
(get_total_income). Проверить работу примера на
реальных данных (создать экземпляры класса Position,
передать данные, проверить значения атрибутов, вызвать
методы экземпляров).


class Worker:
    name: str
    surname: str
    position: str
    _income: dict

    def __init__(self, name: str, surname: str, position: str, wage: str, bonus: int):
        self.name = name
        self.surname = surname
        self.position = position
        self._income = {
            "wage": wage,
            "bonus": bonus
        }


class Position(Worker):
    def get_full_name(self):
        return f"{self.name} {self.surname}"

    def get_total_income(self):
        return sum(self._income.values())


Stiv = Position("Stiv", 'The Great', 'Beekeeper', 2000, 800)
print(Stiv.get_full_name(), Stiv.get_total_income())
Kate = Position("Kate", 'The Great', 'Beekeeper', 1000, 800)
print(Kate.get_full_name(), Kate.get_total_income())





4. Реализуйте базовый класс Car. У данного класса должны быть
следующие атрибуты: speed, color, name, is_police (булево).
А также методы: go, stop, turn(direction), которые должны
сообщать, что машина поехала, остановилась, повернула (куда).
Опишите несколько дочерних классов: TownCar, SportCar, WorkCar,
PoliceCar. Добавьте в базовый класс метод show_speed, который
должен показывать текущую скорость автомобиля. Для классов TownCar
и WorkCar переопределите метод show_speed.
При значении скорости свыше 60 (TownCar) и 40 (WorkCar)
должно выводиться сообщение о превышении скорости.
Создайте экземпляры классов, передайте значения атрибутов.
Выполните доступ к атрибутам, выведите результат.
Выполните вызов методов и также покажите результат.



class Car:
    speed: int
    color: str
    name: str
    is_police: bool = False

    def __init__(self, speed: int, color: str, name: str) -> None:
        self.speed = speed
        self.color = color
        self.name = name

    def go(self):
        print (f"{self.name}: старт")

    def stop(self):
        print (f"{self.name}: стоп")

    def turn(self):
        print (f"{self.name}: поворот - {direction}")

    def show_speed(self):
         print (f"{self.name}: скорость = {self.speed} км/ч")


class TownCar(Car):
    def show_speed(self):
        super().show_speed()
        if self.speed > 60:
            print(f"{self.name}: повышение скорости")

class SportCar(Car):
    pass

class WorkCar(Car):
    def show_speed(self):
        super().show_speed()
        if self.speed > 40:
            print(f"{self.name}: превышение скорости")

class PoliceCar(Car):
    is_police: bool = True


cars = [
    SportCar(240, 'Red', 'Audi'),
    TownCar(180, 'White', 'Oka'),
    WorkCar(70, 'Rose', 'Lada'),
    PoliceCar(170, 'Blue',  'Ford'),
]

cars[0].go()
cars[0].turn("направо")
cars[0].stop()

for car in cars:
    car.show_speed()




5. Реализовать класс Stationery (канцелярская принадлежность).
Определить в нем атрибут title (название) и метод draw (отрисовка).
Метод выводит сообщение “Запуск отрисовки.”
Создать три дочерних класса Pen (ручка), Pencil (карандаш),
Handle (маркер). В каждом из классов реализовать
переопределение метода draw. Для каждого из классов
методы должен выводить уникальное сообщение.
Создать экземпляры классов и проверить, что выведет
описанный метод для каждого экземпляра.



class Stationary:
    title: str
    _message = "Запуск отрисовки."

    def draw(self):
        print(self._message)


class Pen(Stationary):
    _message = "Рисуем ручкой."


class Pencil(Stationary):
    _message = "Рисуем карандашом."


class Handle(Stationary):
    _message = "Рисуем маркером."

items = [Pen(), Pencil(), Handle()]

for item in items:
    item.draw()
